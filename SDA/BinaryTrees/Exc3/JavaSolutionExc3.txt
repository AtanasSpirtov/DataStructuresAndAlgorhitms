import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Solution {

        static class Node {

        int data;
        Node left, right;

        Node(int d) {
            data = d;
            left = right = null;
        }
    }

    static class BinarySearchTree {

        Node root;

        BinarySearchTree() {
            root = null;
        }

        public void insert(int data) {
            this.root = this.insertRec(this.root, data);
        }

        Node insertRec(Node node, int data) {
            if (node == null) {
                this.root = new Node(data);
                return this.root;
            }

            if (data == node.data) {
                return node;
            }

            if (data < node.data) {
                node.left = this.insertRec(node.left, data);
            } else {
                node.right = this.insertRec(node.right, data);
            }
            return node;
        }

        public static class count {
            int c = 0;
        }

        void kthLargestUtil(Node node, int k, count C) {
            if (node == null || C.c >= k) {
                return;
            }

            this.kthLargestUtil(node.right, k, C);

            C.c++;

            if (C.c == k) {
                deleteNode(node.data);
                return;
            }
            this.kthLargestUtil(node.left, k, C);
            return;
        }

        void kthLargest(int k) {
            count c = new count();

            this.kthLargestUtil(this.root, k, c);
        }

        static Node deleteNode(Node root, int k) {

            if (root == null)
                return null;

            if (root.data > k) {
                root.left = deleteNode(root.left, k);
                return root;
            } else if (root.data < k) {
                root.right = deleteNode(root.right, k);
                return root;
            }

            if (root.left == null) {
                Node temp = root.right;
                return temp;
            } else if (root.right == null) {
                Node temp = root.left;
                return temp;
            } else {
                Node succParent = root;

                Node succ = root.right;

                while (succ.left != null) {
                    succParent = succ;
                    succ = succ.left;
                }

                if (succParent != root)
                    succParent.left = succ.right;
                else
                    succParent.right = succ.right;

                root.data = succ.data;

                return root;
            }
        }

        void deleteNode(int element) {
            deleteNode(this.root, element);
        }
        void printLevelOrder(Node root)
        {
            if(root == null) {
                return;
            }

            Queue<Node> q = new LinkedList<>();
            q.add(root);
            while(true)
            {
                int nodeCount = q.size();
                if(nodeCount == 0) {
                    break;
                }

                while(nodeCount > 0)
                {
                    Node node = q.peek();
                    System.out.print(node.data + " ");
                    q.remove();
                    if(node.left != null)
                        q.add(node.left);
                    if(node.right != null)
                        q.add(node.right);
                    nodeCount--;
                }
            }
        }
        void print()
        {
            printLevelOrder(root);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BinarySearchTree tree = new BinarySearchTree();
        int number = scanner.nextInt();
        int k = scanner.nextInt();
        for (int i = 0; i < number; i++) {
            tree.insert(scanner.nextInt());
        }
        tree.kthLargest(k);
        tree.print();

    }
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Solution {
    static class Graph {
        int size;
        ArrayList<LinkedList<Long>> adjList = new ArrayList<>();

        public Graph(int V) {
            this.size = V;
            for (int i = 0; i < size; i++) {
                adjList.add(new LinkedList<>());
            }
        }

        public void addEdge(long first, long second) {
            adjList.get((int) first).add(second);
            adjList.get((int) second).add(first);
        }

        public void removeEdge(long first, long second) {
            adjList.get((int) first).remove(second);
            adjList.get((int) second).remove(first);
        }

        Boolean isCyclic()
        {
            Boolean[] visited = new Boolean[size];
            for (int i = 0; i < size; i++)
                visited[i] = false;
            for (int u = 0; u < size; u++)
            {
                if (!visited[u])
                    if (isCyclicUtil(u, visited, -1))
                        return true;
            }

            return false;
        }

        Boolean isCyclicUtil(int v, Boolean[] visited, int parent) {
            visited[v] = true;
            int i;
            Iterator<Long> it = adjList.get(v).iterator();
            while (it.hasNext()) {
                i = Math.toIntExact(it.next());
                if (!visited[i]) {
                    if (isCyclicUtil(i, visited, v))
                        return true;
                } else if (i != parent)
                    return true;
            }
            return false;
        }
    }

    static void sortByColumn(long[][] arr) {
        Arrays.sort(arr, (entry1, entry2) -> {
            if (entry1[2] > entry2[2])
                return 1;
            else if (entry1[2] == entry2[2]) {
                return Long.compare(entry2[3] * entry2[2], entry1[3] * entry1[2]);
            } else return -1;
        });
    }

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String[] read = reader.readLine().split(" ");
        int n = Integer.parseInt(read[0]);
        int m = Integer.parseInt(read[1]);

        long[][] arr = new long[m][5];

        for (int i = 0; i < m; i++) {
            String[] input = reader.readLine().split(" ");
            int u = Integer.parseInt(input[0]);
            int v = Integer.parseInt(input[1]);
            long c1 = Long.parseLong(input[2]);
            long c2 = Long.parseLong(input[3]);
            arr[i][0] = u - 1;
            arr[i][1] = v - 1;
            arr[i][2] = c1;
            arr[i][3] = c2;
            arr[i][4] = i + 1;
        }
        sortByColumn(arr);
        Graph g = new Graph(n);

        for (int i = 0; i < m; i++) {
            long start = arr[i][0];
            long end = arr[i][1];
            g.addEdge(start, end);
            if (g.isCyclic()) {
                g.removeEdge(start, end);
            } else {
                System.out.println(arr[i][4]);
            }
        }
    }
}